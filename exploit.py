import traceback


class Exploit:

  def __init__(self, h_id):
    self.h_id = h_id

  # Class function to create a new exploit
  def createExploit(self, conn, cursor, content):
    try:
      cursor.execute("INSERT INTO exploits (content, hacker_id) VALUES (?, ?)", [
          content, self.h_id])
      conn.commit()
    except:
      print("Error creating exploit")
      traceback.print_exc()

  # get own exploits using execute, fetchall, and a loop to display it prettify it!
  # Should display newest first!
  def getOwnExploits(self, cursor):
    try:
      cursor.execute("SELECT h.alias, e.content FROM hackers h INNER JOIN exploits e ON h.id = e.hacker_id WHERE e.hacker_id = ? ORDER BY e.id DESC", [
          self.h_id])
      results = cursor.fetchall()
      for user, content in results:
        print(f'User: {user} \n Content: {content} \n')
    except:
      print("Error getting your exploits!")
      traceback.print_exc()

  # get others exploits using execute, fetchall, and a loop to display it prettify it!
  # Should display newest first!
  def getOthersExploits(self, cursor):
    try:
      cursor.execute("SELECT h.alias, e.content FROM hackers h INNER JOIN exploits e ON h.id = e.hacker_id WHERE e.hacker_id != ? ORDER BY e.id DESC", [
          self.h_id])
      results = cursor.fetchall()
      for user, content in results:
        print(f'User: {user} \n Content: {content} \n')
    except:
      print("Error getting others exploits!")
      traceback.print_exc()
